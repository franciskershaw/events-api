name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  workflow_dispatch:

# Add environment variables at workflow level
env:
  DOCKER_IMAGE: docker.io/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}
  DOMAIN: api.organisey.co.uk # All backend APIs are deployed to api.mydomain.com

jobs:
  # Add a build-and-push job that runs first
  build:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ env.DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        timeout-minutes: 5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Tag current production as previous
        continue-on-error: true # Allow this step to fail on first deployment
        run: |
          if docker pull ${{ env.DOCKER_IMAGE }}:latest; then
            echo "Previous version exists, creating backup tag"
            docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:previous
            docker push ${{ env.DOCKER_IMAGE }}:previous
          else
            echo "No previous version found, skipping backup"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
          cache-to: type=gha,mode=max
        timeout-minutes: 15

      - name: Update Job Summary
        run: |
          echo "### Build Complete :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ env.DOMAIN }}
    concurrency:
      group: production_environment
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy Nginx configuration
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "nginx/${{ github.event.repository.name }}.conf"
          target: "/home/${{ secrets.DO_USERNAME }}/nginx/"
          strip_components: 1
          timeout: 30s

      - name: Configure Nginx and SSL
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          timeout: 2m
          script: |
            echo "Starting nginx configuration..."

            # Debug: Show current directory and contents
            pwd
            ls -la /home/${{ secrets.DO_USERNAME }}/nginx/

            # Check existing configuration
            if [ -f "/etc/nginx/sites-available/api.${{ secrets.DOMAIN }}" ]; then
              echo "Checking existing nginx configuration..."
              if grep -q "ssl_certificate" "/etc/nginx/sites-available/api.${{ secrets.DOMAIN }}"; then
                echo "SSL configuration exists, preserving current nginx config"
                exit 0
              fi
            fi

            echo "Setting up new nginx config..."
            if [ ! -f "/home/${{ secrets.DO_USERNAME }}/nginx/${{ github.event.repository.name }}.conf" ]; then
              echo "Error: nginx configuration file not found"
              exit 1
            fi

            # Move configuration file
            sudo mv "/home/${{ secrets.DO_USERNAME }}/nginx/${{ github.event.repository.name }}.conf" "/etc/nginx/sites-available/api.${{ secrets.DOMAIN }}"
            sudo ln -sf "/etc/nginx/sites-available/api.${{ secrets.DOMAIN }}" "/etc/nginx/sites-enabled/"

            # Verify nginx configuration
            echo "Testing nginx configuration..."
            sudo nginx -t

            # Setup SSL if needed
            if [ ! -f "/etc/letsencrypt/live/api.${{secrets.DOMAIN}}/fullchain.pem" ]; then
              echo "Setting up SSL certificate..."
              sudo certbot --nginx -d api.${{secrets.DOMAIN}} \
              --nginx-server-root /etc/nginx/ \
              --non-interactive \
              --agree-tos \
              --email ${{ secrets.CERTBOT_EMAIL }} \
              --redirect
            fi
            echo "Reloading nginx..."
            sudo systemctl reload nginx

      - name: Deploy Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          timeout: 5m
          script: |
            # Deploy Docker container
            echo "Deploying Docker container..."

            echo "Cleaning up existing containers..."
            docker stop ${{ github.event.repository.name }} ${{ github.event.repository.name }}-new || true
            docker rm ${{ github.event.repository.name }} ${{ github.event.repository.name }}-new || true

            echo "Pulling latest image..."
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            echo "Starting new container..."
            docker run -d \
              --name ${{ github.event.repository.name }}-new \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:5500 || exit 1" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-retries=3 \
              -p 5500:5500 \
              -e NODE_ENV=production \
              -e PORT=5500 \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              -e CORS_ORIGIN='${{ secrets.CORS_ORIGIN }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' \
              -e GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
              -e GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
              ${{ env.DOCKER_IMAGE }}:latest

            sleep 15

            if ! docker ps | grep -q "${{ github.event.repository.name }}-new"; then
              echo "Container failed to start"
              docker logs ${{ github.event.repository.name }}-new
              exit 1
            fi

      - name: Health Check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          script: |
            HEALTH_CHECK_ATTEMPTS=0
            MAX_ATTEMPTS=10

            until [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_ATTEMPTS ] || curl -sf http://localhost:5500 > /dev/null; do
              echo "Attempt $((HEALTH_CHECK_ATTEMPTS + 1))/$MAX_ATTEMPTS"
              HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
              sleep 3
            done

            if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "Health check failed"
              docker logs ${{ github.event.repository.name }}-new
              exit 1
            fi

            echo "Container healthy, finalizing deployment..."
            docker stop ${{ github.event.repository.name }} || true
            docker rm ${{ github.event.repository.name }} || true
            docker rename ${{ github.event.repository.name }}-new ${{ github.event.repository.name }}

      - name: Update Job Summary
        if: success()
        run: |
          echo "### Deployment Complete :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- URL: https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container: ${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY

      - name: Update Job Summary on Failure
        if: failure()
        run: |
          echo "### Deployment Failed :x:" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for more details." >> $GITHUB_STEP_SUMMARY
